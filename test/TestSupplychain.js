// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	var sku = 1;
	var upc = 1;
	const ownerID = accounts[0];
	const originFisherID = accounts[1];
	const originFisherName = 'John Doe';
	const originFisherInformation = 'Yarray Valley';
	const originFisherLatitude = '-38.239770';
	const originFisherLongitude = '144.341490';
	var productID = sku + upc;
	const productNotes = 'Delicious fish';
	const productPrice = web3.utils.toWei('1', 'ether');
	var itemState = 0;
	const regulatorID = accounts[2];
	const processorID = accounts[3];
	const distributorID = accounts[4];
	const consumerID = accounts[5];
	const emptyAddress = '0x0000000000000000000000000000000000000000';

	///Available Accounts
	///==================
	///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
	///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
	///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
	///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
	///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
	///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
	///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
	///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
	///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
	///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

	console.log('ganache-cli accounts used here...');
	console.log('Contract Owner: accounts[0] ', accounts[0]);
	console.log('Fisher: accounts[1] ', accounts[1]);
	console.log('Regulator: accounts[2] ', accounts[2]);
	console.log('Processor: accounts[3] ', accounts[3]);
	console.log('Distributor: accounts[4] ', accounts[4]);
	console.log('Consumer: accounts[5] ', accounts[5]);

	// 1st Test
	it('Testing smart contract function catchItem() that allows a farmer to harvest coffee', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;

		// Watch the emitted event Catched()
		supplyChain.Catched((err, res) => {
			eventEmitted = true
		});

		// Mark an item as Catched by calling function harvestItem()
		await supplyChain.catchFish(upc, originFisherID, originFisherName, originFisherInformation, originFisherLatitude, originFisherLongitude, productNotes)

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

		// Verify the result set
		assert.equal(resultBufferOne[0].toString(), sku, 'Error: Invalid item SKU');
		assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
		assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID');
		assert.equal(resultBufferOne[3], originFisherID, 'Error: Missing or Invalid originFisherID');
		assert.equal(resultBufferOne[4], originFisherName, 'Error: Missing or Invalid originFisherName');
		assert.equal(resultBufferOne[5], originFisherInformation, 'Error: Missing or Invalid originFisherInformation');
		assert.equal(resultBufferOne[6], originFisherLatitude, 'Error: Missing or Invalid originFisherLatitude');
		assert.equal(resultBufferOne[7], originFisherLongitude, 'Error: Missing or Invalid originFisherLongitude');
		assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
		assert.equal(eventEmitted, true, 'Invalid event emitted');
	});

	// 2nd Test
	it('Testing smart contract function approve() that allows a regulator to approve the fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;

		// Watch the emitted event Approved()
		supplyChain.Approved(() => {
			eventEmitted = true;
		});

		// set the regulator
		await supplyChain.addRegulator(regulatorID);


		// Mark an item as Approved by calling function approve()
		await supplyChain.approve(upc, { from: regulatorID });


		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


		// Verify the result set
		assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
		assert.equal(resultBufferTwo[8], regulatorID, 'Error: wrong regulator account');
		assert.equal(eventEmitted, true, 'Invalid event emitted')
	});

	// 3rd Test
	it('Testing smart contract function landFish() that allows a fisher to land fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;

		// Watch the emitted event Packed()
		supplyChain.Landed(() => {
			eventEmitted = true;
		});

		// set fisher
		await supplyChain.addFisher(originFisherID);

		// Mark an item as Packed by calling function landFish()
		await supplyChain.landFish(upc, { from: originFisherID });


		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


		// Verify the result set
		assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');
		assert.equal(resultBufferOne[3], originFisherID, 'Error: wrong fisher account');
		assert.equal(eventEmitted, true, 'Invalid event emitted')

	});

	// 4th Test
	it('Testing smart contract function processFish() that allows a processor to process fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;


		// Watch the emitted event ForSale()
		supplyChain.Processed(() => {
			eventEmitted = true;
		});

		// set processor
		await supplyChain.addProcessor(processorID);

		// Mark an item as ForSale by calling function processFish()
		await supplyChain.processFish(upc, { from: processorID });

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


		// Verify the result set
		assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
		assert.equal(resultBufferTwo[9], processorID, 'Error: wrong processor account');
		assert.equal(eventEmitted, true, 'Invalid event emitted')

	});

	// 5th Test
	it('Testing smart contract function packFish() that allows a processor to pack fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;


		// Watch the emitted event ForSale()
		supplyChain.Packed(() => {
			eventEmitted = true;
		});

		// Mark an item as ForSale by calling function packFish()
		await supplyChain.packFish(upc, { from: processorID });

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


		// Verify the result set
		assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
		assert.equal(resultBufferTwo[9], processorID, 'Error: wrong processor account');
		assert.equal(eventEmitted, true, 'Invalid event emitted');

	});

	// 6th Test
	it('Testing smart contract function sellFish() that allows a distributor to sell fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;


		// Watch the emitted event ForSale()
		supplyChain.ForSale(() => {
			eventEmitted = true;
		});

		// set distributor
		await supplyChain.addDistributor(distributorID);

		// Mark an item as ForSale by calling function packFish()
		await supplyChain.sellFish(upc, productPrice, { from: distributorID });

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


		// Verify the result set
		assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
		assert.equal(resultBufferTwo[6], distributorID, 'Error: wrong distributor account');
		assert.equal(eventEmitted, true, 'Invalid event emitted');

	});

	// 7th Test
	it('Testing smart contract function buyItem() that allows a consumer to buy fish', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Declare and Initialize a variable for event
		let eventEmitted = false;

		// Initialize fisher previous balance
		const balanceOfFisherBeforeTransaction = await web3.eth.getBalance(originFisherID);

		// Watch the emitted event Sold()
		supplyChain.Sold(() => {
			eventEmitted = true;
		});

		// set consumer
		await supplyChain.addConsumer(consumerID);

		// Mark an item as Sold by calling function buyItem()
		await supplyChain.buyItem(upc, { from: consumerID, value: productPrice });

		// Initialize fisher after balance
		const balanceOfFisherAfterTransaction = await web3.eth.getBalance(originFisherID);

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

		// Verify the result set
		assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
		assert.equal(resultBufferOne[2], consumerID, 'Error: wrong owner account');
		assert.equal(resultBufferTwo[7], consumerID, 'Error: wrong consumer account');
		assert.equal(balanceOfFisherAfterTransaction, Number(balanceOfFisherBeforeTransaction) + Number(productPrice), 'Error: wrong fisher balance');
		assert.equal(eventEmitted, true, 'Invalid event emitted');
	});

	// 8th Test
	it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

		// Verify the result set:
		assert.equal(resultBufferOne[0].toString(), sku, 'Error: Invalid item SKU');
		assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
		assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
		assert.equal(resultBufferOne[3], originFisherID, 'Error: Missing or Invalid originFisherID');
		assert.equal(resultBufferOne[4], originFisherName, 'Error: Missing or Invalid originFisherName');
		assert.equal(resultBufferOne[5], originFisherInformation, 'Error: Missing or Invalid originFisherInformation');
		assert.equal(resultBufferOne[6], originFisherLatitude, 'Error: Missing or Invalid originFisherLatitude');
		assert.equal(resultBufferOne[7], originFisherLongitude, 'Error: Missing or Invalid originFisherLongitude');
	});

	// 9th Test
	it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async () => {
		const supplyChain = await SupplyChain.deployed();

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

		// Verify the result set:
		assert.equal(resultBufferTwo[0].toString(), sku, 'Error: Invalid item SKU');
		assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
		assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID');
		assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes');
		assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice');
		assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
		assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
		assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID');
		assert.equal(resultBufferTwo[8], regulatorID, 'Error: Missing or Invalid regulatorID');
		assert.equal(resultBufferTwo[9], processorID, 'Error: Missing or Invalid processorID');
	});

	// 10th Test
	it('Testing smart contract function transferOwnership() that allows owner to transfer contract ownership', async () => {
		const supplyChain = await SupplyChain.deployed();

		let eventEmitted = false;

		supplyChain.TransferOwnership(()=>{
			eventEmitted = true;
		});

		await supplyChain.transferOwnership(originFisherID);

		// Retrieve the current owner
		const owner = await supplyChain.getOwner();

		// Verify the result set:
		assert.equal(owner, originFisherID, 'Error: Invalid Owner address');
		assert.equal(eventEmitted, true, 'Invalid event emitted');
	});

	// 11th Test
	it('Testing smart contract function renounceOwnership() that allows owner to renounce contract ownership', async () => {
		const supplyChain = await SupplyChain.deployed();

		let eventEmitted = false;

		supplyChain.TransferOwnership(()=>{
			eventEmitted = true;
		});

		await supplyChain.renounceOwnership();

		// Retrieve the current owner
		const owner = await supplyChain.getOwner();

		// Verify the result set:
		assert.equal(owner, emptyAddress, 'Error: Invalid Owner address');
		assert.equal(eventEmitted, true, 'Invalid event emitted');
	});

});

