// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var FisherRole = artifacts.require('FisherRole');

contract('FisherRole', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	const ownerID = accounts[0];
	const newFisher = accounts[1];
	let fisherRole;

	beforeEach(async () => {
		fisherRole = await FisherRole.deployed();
	});

	// 1st Test
	it('Testing smart contract was created correctly', async () => {
		// Declare and Initialize a variable for event
		let fisherAddedEmited = false;

		// Watch the emitted event FisherAdded()
		fisherRole.FisherAdded((err, res) => {
			fisherAddedEmited = true
		});

		expect(await fisherRole.isFisher.call(ownerID)).to.be.equal(true, 'The owner is not fisher');
		expect(fisherAddedEmited).to.be.equal(true, 'FisherAdded was not emitted');
	});

	it('Testing smart contract addFisher function', async () => {
		// Declare and Initialize a variable for event
		let fisherAddedEmited = false;

		// Watch the emitted event FisherAdded()
		fisherRole.FisherAdded((err, res) => {
			fisherAddedEmited = true
		});

		await fisherRole.addFisher(newFisher);

		expect(await fisherRole.isFisher.call(newFisher)).to.be.equal(true, 'The newFisher is not fisher');
		expect(fisherAddedEmited).to.be.equal(true, 'FisherAdded was not emitted');
	});

	it('Testing smart contract renounceFisher function', async () => {
		// Declare and Initialize a variable for event
		let fisherRemovedEmited = false;

		// Watch the emitted event FisherRemoved()
		fisherRole.FisherRemoved((err, res) => {
			fisherRemovedEmited = true
		});

		await fisherRole.renounceFisher();

		expect(await fisherRole.isFisher.call(ownerID)).to.be.equal(false, 'The removed fisher still fisher');
		expect(fisherRemovedEmited).to.be.equal(true, 'FisherRemoved was not emitted');
	});

});

