// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var ConsumerRole = artifacts.require('ConsumerRole');

contract('ConsumerRole', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	const ownerID = accounts[0];
	const newConsumer = accounts[1];
	let consumerRole;

	beforeEach(async () => {
		consumerRole = await ConsumerRole.deployed();
	});

	// 1st Test
	it('Testing smart contract was created correctly', async () => {
		// Declare and Initialize a variable for event
		let consumerAddedEmited = false;

		// Watch the emitted event ConsumerAdded()
		consumerRole.ConsumerAdded((err, res) => {
			consumerAddedEmited = true
		});

		expect(await consumerRole.isConsumer.call(ownerID)).to.be.equal(true, 'The owner is not consumer');
		expect(consumerAddedEmited).to.be.equal(true, 'ConsumerAdded was not emitted');
	});

	it('Testing smart contract addConsumer function', async () => {
		// Declare and Initialize a variable for event
		let consumerAddedEmited = false;

		// Watch the emitted event ConsumerAdded()
		consumerRole.ConsumerAdded((err, res) => {
			consumerAddedEmited = true
		});

		await consumerRole.addConsumer(newConsumer);

		expect(await consumerRole.isConsumer.call(newConsumer)).to.be.equal(true, 'The newConsumer is not consumer');
		expect(consumerAddedEmited).to.be.equal(true, 'ConsumerAdded was not emitted');
	});

	it('Testing smart contract renounceConsumer function', async () => {
		// Declare and Initialize a variable for event
		let consumerRemovedEmited = false;

		// Watch the emitted event ConsumerRemoved()
		consumerRole.ConsumerRemoved((err, res) => {
			consumerRemovedEmited = true
		});

		await consumerRole.renounceConsumer();

		expect(await consumerRole.isConsumer.call(ownerID)).to.be.equal(false, 'The removed consumer still consumer');
		expect(consumerRemovedEmited).to.be.equal(true, 'ConsumerRemoved was not emitted');
	});

});

