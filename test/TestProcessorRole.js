// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var ProcessorRole = artifacts.require('ProcessorRole');

contract('ProcessorRole', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	const ownerID = accounts[0];
	const newProcessor = accounts[1];
	let processorRole;

	beforeEach(async () => {
		processorRole = await ProcessorRole.deployed();
	});

	// 1st Test
	it('Testing smart contract was created correctly', async () => {
		// Declare and Initialize a variable for event
		let processorAddedEmited = false;

		// Watch the emitted event ProcessorAdded()
		processorRole.ProcessorAdded((err, res) => {
			processorAddedEmited = true
		});

		expect(await processorRole.isProcessor.call(ownerID)).to.be.equal(true, 'The owner is not processor');
		expect(processorAddedEmited).to.be.equal(true, 'ProcessorAdded was not emitted');
	});

	it('Testing smart contract addProcessor function', async () => {
		// Declare and Initialize a variable for event
		let processorAddedEmited = false;

		// Watch the emitted event ProcessorAdded()
		processorRole.ProcessorAdded((err, res) => {
			processorAddedEmited = true
		});

		await processorRole.addProcessor(newProcessor);

		expect(await processorRole.isProcessor.call(newProcessor)).to.be.equal(true, 'The newProcessor is not processor');
		expect(processorAddedEmited).to.be.equal(true, 'ProcessorAdded was not emitted');
	});

	it('Testing smart contract renounceProcessor function', async () => {
		// Declare and Initialize a variable for event
		let processorRemovedEmited = false;

		// Watch the emitted event ProcessorRemoved()
		processorRole.ProcessorRemoved((err, res) => {
			processorRemovedEmited = true
		});

		await processorRole.renounceProcessor();

		expect(await processorRole.isProcessor.call(ownerID)).to.be.equal(false, 'The removed processor still processor');
		expect(processorRemovedEmited).to.be.equal(true, 'ProcessorRemoved was not emitted');
	});

});

