// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var DistributorRole = artifacts.require('DistributorRole');

contract('DistributorRole', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	const ownerID = accounts[0];
	const newDistributor = accounts[1];
	let distributorRole;

	beforeEach(async () => {
		distributorRole = await DistributorRole.deployed();
	});

	// 1st Test
	it('Testing smart contract was created correctly', async () => {
		// Declare and Initialize a variable for event
		let distributorAddedEmited = false;

		// Watch the emitted event DistributorAdded()
		distributorRole.DistributorAdded((err, res) => {
			distributorAddedEmited = true
		});

		expect(await distributorRole.isDistributor.call(ownerID)).to.be.equal(true, 'The owner is not distributor');
		expect(distributorAddedEmited).to.be.equal(true, 'DistributorAdded was not emitted');
	});

	it('Testing smart contract addDistributor function', async () => {
		// Declare and Initialize a variable for event
		let distributorAddedEmited = false;

		// Watch the emitted event DistributorAdded()
		distributorRole.DistributorAdded((err, res) => {
			distributorAddedEmited = true
		});

		await distributorRole.addDistributor(newDistributor);

		expect(await distributorRole.isDistributor.call(newDistributor)).to.be.equal(true, 'The newDistributor is not distributor');
		expect(distributorAddedEmited).to.be.equal(true, 'DistributorAdded was not emitted');
	});

	it('Testing smart contract renounceDistributor function', async () => {
		// Declare and Initialize a variable for event
		let distributorRemovedEmited = false;

		// Watch the emitted event DistributorRemoved()
		distributorRole.DistributorRemoved((err, res) => {
			distributorRemovedEmited = true
		});

		await distributorRole.renounceDistributor();

		expect(await distributorRole.isDistributor.call(ownerID)).to.be.equal(false, 'The removed distributor still distributor');
		expect(distributorRemovedEmited).to.be.equal(true, 'DistributorRemoved was not emitted');
	});

});

